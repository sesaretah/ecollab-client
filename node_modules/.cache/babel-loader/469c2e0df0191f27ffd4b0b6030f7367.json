{"ast":null,"code":"import Janus from \"../../janus.js\";\nimport $ from 'jquery';\nexport function sessionCreate(room) {\n  var self = this;\n  Janus.init({\n    debug: \"all\",\n    callback: function () {\n      var janus = new Janus({\n        server: self.state.server,\n        success: function () {\n          // Attach to AudioBridge plugin\n          janus.attach({\n            plugin: \"janus.plugin.audiobridge\",\n            opaqueId: self.state.opaqueId,\n            success: function (pluginHandle) {\n              //$('#details').remove();\n              self.setState({\n                mixertest: pluginHandle\n              });\n              Janus.log(\"Plugin attached! (\" + self.state.mixertest.getPlugin() + \", id=\" + self.state.mixertest.getId() + \")\");\n              self.registerUsername(room); // Prepare the username registration\n\n              /*\n                                    $('#audiojoin').removeClass('hide').show();\n                                    $('#registernow').removeClass('hide').show();\n                                    $('#register').click(registerUsername);\n                                    $('#username').focus();\n                                    $('#start').removeAttr('disabled').html(\"Stop\")\n                                        .click(function () {\n                                            $(this).attr('disabled', true);\n                                            janus.destroy();\n                                        });\n                                    */\n            },\n            error: function (error) {\n              Janus.error(\"  -- Error attaching plugin...\", error); //bootbox.alert(\"Error attaching plugin... \" + error);\n            },\n            consentDialog: function (on) {\n              Janus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n            },\n            iceState: function (state) {\n              Janus.log(\"ICE state changed to \" + state);\n            },\n            mediaState: function (medium, on) {\n              Janus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n            },\n            webrtcState: function (on) {\n              Janus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n            },\n            onmessage: function (msg, jsep) {\n              Janus.debug(\" ::: Got a message :::\", msg);\n              var event = msg[\"audiobridge\"];\n              Janus.debug(\"Event: \" + event);\n\n              if (event) {\n                //console.log(event, msg);\n                if (event == \"talking\") {\n                  self.participantChangeStatus(msg[\"id\"], true);\n                }\n\n                if (event == \"stopped-talking\") {\n                  self.participantChangeStatus(msg[\"id\"], false);\n                }\n\n                if (event === \"joined\") {\n                  // Successfully joined, negotiate WebRTC now\n                  if (msg[\"id\"]) {\n                    self.setState({\n                      myid: msg[\"id\"]\n                    });\n                    Janus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + self.state.myid);\n                    self.addParticipant(msg[\"id\"], self.state.fullname + \"ยง\" + self.state.userUUID + \"ยง\" + self.state.userColor);\n\n                    if (!self.state.webrtcUp) {\n                      self.setState({\n                        webrtcUp: true\n                      }); // Publish our stream\n\n                      self.state.mixertest.createOffer({\n                        media: {\n                          video: false,\n                          audio: {\n                            echoCancellation: true\n                          }\n                        },\n                        // This is an audio only room\n                        success: function (jsep) {\n                          Janus.debug(\"Got SDP!\", jsep);\n                          var muted = true;\n\n                          if (self.state.reloadParams && self.state.reloadParams['mic']) {\n                            muted = false;\n                          }\n\n                          var publish = {\n                            request: \"configure\",\n                            muted: muted\n                          };\n                          self.state.mixertest.send({\n                            message: publish,\n                            jsep: jsep\n                          });\n                        },\n                        error: function (error) {\n                          Janus.error(\"WebRTC error:\", error); // bootbox.alert(\"WebRTC error... \" + error.message);\n                        }\n                      });\n                    }\n                  } // Any room participant?\n\n\n                  if (msg[\"participants\"]) {\n                    var list = msg[\"participants\"];\n                    Janus.debug(\"Got a list of participants:\", list);\n\n                    for (var f in list) {\n                      var id = list[f][\"id\"];\n                      var display = list[f][\"display\"];\n                      var setup = list[f][\"setup\"];\n                      var muted = list[f][\"muted\"]; //console.log(\"%%%%%%%%\", list[f]);\n\n                      self.addParticipant(list[f][\"id\"], list[f][\"display\"]); //self.newRemoteFeed(id, display, audio, video);\n\n                      /*\n                                                    Janus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n                                                    if ($('#rp' + id).length === 0) {\n                                                        // Add to the participants list\n                                                        $('#list').append('<li id=\"rp' + id + '\" class=\"list-group-item\">' + display +\n                                                            ' <i class=\"absetup fa fa-chain-broken\"></i>' +\n                                                            ' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n                                                        $('#rp' + id + ' > i').hide();\n                                                    }\n                                                    if (muted === true || muted === \"true\")\n                                                        $('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n                                                    else\n                                                        $('#rp' + id + ' > i.abmuted').hide();\n                                                    if (setup === true || setup === \"true\")\n                                                        $('#rp' + id + ' > i.absetup').hide();\n                                                    else\n                                                        $('#rp' + id + ' > i.absetup').removeClass('hide').show();\n                                                        */\n                    }\n                  }\n                } else if (event === \"roomchanged\") {\n                  // The user switched to a different room\n                  self.setState({\n                    myid: msg[\"id\"]\n                  });\n                  Janus.log(\"Moved to room \" + msg[\"room\"] + \", new ID: \" + self.state.myid); // Any room participant?\n                  // $('#list').empty();\n\n                  if (msg[\"participants\"]) {\n                    var list = msg[\"participants\"];\n                    Janus.debug(\"Got a list of participants:\", list);\n\n                    for (var f in list) {\n                      var id = list[f][\"id\"];\n                      var display = list[f][\"display\"];\n                      var setup = list[f][\"setup\"];\n                      var muted = list[f][\"muted\"]; //console.log(\">>>>>>\", list[f]);\n\n                      self.addParticipant(msg[\"id\"], self.state.fullname + \"ยง\" + self.state.userUUID + \"ยง\" + self.state.userColor);\n                      Janus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n                      /*\n                                                     if ($('#rp' + id).length === 0) {\n                                                         // Add to the participants list\n                                                         $('#list').append('<li id=\"rp' + id + '\" class=\"list-group-item\">' + display +\n                                                             ' <i class=\"absetup fa fa-chain-broken\"></i>' +\n                                                             ' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n                                                         $('#rp' + id + ' > i').hide();\n                                                     }\n                                                     if (muted === true || muted === \"true\")\n                                                         $('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n                                                     else\n                                                         $('#rp' + id + ' > i.abmuted').hide();\n                                                     if (setup === true || setup === \"true\")\n                                                         $('#rp' + id + ' > i.absetup').hide();\n                                                     else\n                                                         $('#rp' + id + ' > i.absetup').removeClass('hide').show();\n                                                         */\n                    }\n                  }\n                } else if (event === \"destroyed\") {\n                  // The room has been destroyed\n                  Janus.warn(\"The room has been destroyed!\");\n                } else if (event === \"event\") {\n                  //console.log('Participant...', msg)\n                  if (msg[\"participants\"]) {\n                    var list = msg[\"participants\"];\n                    Janus.debug(\"Got a list of participants:\", list);\n\n                    for (var f in list) {\n                      var id = list[f][\"id\"];\n                      var display = list[f][\"display\"];\n                      var setup = list[f][\"setup\"];\n                      var muted = list[f][\"muted\"];\n                      var talking = list[f][\"talking\"];\n                      Janus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\"); //console.log(\"%%%%%%%%\", list);\n\n                      if (talking) {//console.log(\"%%%%%%%%\",list[f][\"id\"],\"is talking ...\");\n                      }\n\n                      if (muted) {\n                        self.participantChangeStatus(list[f][\"id\"], false);\n                      }\n\n                      self.addParticipant(list[f][\"id\"], list[f][\"display\"]);\n                      /*\n                                                    if ($('#rp' + id).length === 0) {\n                                                        // Add to the participants list\n                                                        $('#list').append('<li id=\"rp' + id + '\" class=\"list-group-item\">' + display +\n                                                            ' <i class=\"absetup fa fa-chain-broken\"></i>' +\n                                                            ' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n                                                        $('#rp' + id + ' > i').hide();\n                                                    }\n                                                    if (muted === true || muted === \"true\")\n                                                        $('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n                                                    else\n                                                        $('#rp' + id + ' > i.abmuted').hide();\n                                                    if (setup === true || setup === \"true\")\n                                                        $('#rp' + id + ' > i.absetup').hide();\n                                                    else\n                                                        $('#rp' + id + ' > i.absetup').removeClass('hide').show();\n                                                        */\n                    }\n                  } else if (msg[\"error\"]) {\n                    if (msg[\"error_code\"] === 485) {// This is a \"no such room\" error: give a more meaningful description\n                    } else {}\n\n                    return;\n                  } // Any new feed to attach to?\n\n\n                  if (msg[\"leaving\"]) {\n                    // One of the participants has gone away?\n                    var leaving = msg[\"leaving\"];\n                    self.removeParticipant(leaving);\n                    Janus.log(\"Participant left: \" + leaving + \" elements with ID #rp\" + leaving + \")\"); //$('#rp' + leaving).remove();\n                  }\n                }\n              }\n\n              if (jsep) {\n                Janus.debug(\"Handling SDP as well...\", jsep);\n                self.state.mixertest.handleRemoteJsep({\n                  jsep: jsep\n                });\n              }\n            },\n            onlocalstream: function (stream) {\n              Janus.debug(\" ::: Got a local stream :::\", stream); //console.log(\"Local stream ******\", stream);\n              //console.log(\"Local stream ******\", stream.getTracks());\n\n              self.setState({\n                localStream: stream\n              }); // We're not going to attach the local audio stream\n              // $('#audiojoin').hide();\n              // $('#room').removeClass('hide').show();\n              //$('#participant').removeClass('hide').html(myusername).show();\n            },\n            onremotestream: function (stream) {\n              if ($(\"#roomaudio\").length === 0) {\n                $(\"#mixedaudio\").append('<audio class=\"rounded centered\" id=\"roomaudio\" width=\"100%\" height=\"100%\" autoplay/>');\n                Janus.attachMediaStream(document.getElementById(\"roomaudio\"), stream);\n                self.setState({\n                  remoteStream: stream\n                });\n              }\n            },\n            oncleanup: function () {\n              //  webrtcUp = false;\n              Janus.log(\" ::: Got a cleanup notification :::\"); //$('#participant').empty().hide();\n              //$('#list').empty();\n              //$('#mixedaudio').empty();\n              //$('#room').hide();\n            }\n          });\n        },\n        error: function (error) {//   Janus.error(error);\n          //console.log(error);\n        },\n        destroyed: function () {\n          window.location.reload();\n        }\n      });\n    }\n  });\n}\nexport function registerUsername(room) {\n  var self = this;\n  var register = {\n    request: \"join\",\n    room: room,\n    pin: self.state.pin,\n    display: self.state.fullname + \" ยง\" + self.state.userUUID + \"ยง\" + self.state.userColor\n  };\n  self.state.mixertest.send({\n    message: register\n  });\n  self.setState({\n    myId: self.state.mixertest.id\n  });\n}\nexport function removeParticipant(id) {\n  var self = this;\n  self.setState({\n    participants: self.state.participants.filter(item => item.id !== id)\n  });\n}\nexport function addParticipant(id, p) {\n  //console.log(\"Adding Participants ...\", id, p);\n  var self = this;\n  var participant = p.split(\"ยง\");\n\n  if (this.exisitingParticipant(participant[1])) {\n    self.setState({\n      participants: self.state.participants.concat({\n        id: id,\n        display: participant[0],\n        uuid: participant[1],\n        userColor: participant[2],\n        role: \"listener\",\n        current: \"stopped-talking\"\n      })\n    });\n  } //console.log(\"participant added:\", participant[1]);\n\n}\nexport function exisitingParticipant(participantId) {\n  var self = this;\n  var exisiting = self.state.participants.filter(item => item.uuid === participantId);\n\n  if (exisiting.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function participantDisplay(participantId) {\n  var self = this;\n  var exisiting = self.state.participants.filter(item => item.uuid === participantId);\n\n  if (exisiting.length === 0) {\n    return \"\";\n  } else {\n    return exisiting[0].display;\n  }\n}\nexport function participantChangeStatus(participantId, status) {\n  this.setState(prevState => ({\n    talking: { ...prevState.talking,\n      [participantId]: status\n    }\n  }));\n}\nexport function participantChangeRoom(participantId, room) {\n  this.setState(prevState => ({\n    participantRoom: { ...prevState.participantRoom,\n      [participantId]: room\n    }\n  }));\n}\nexport function toggleMute() {\n  var self = this;\n  this.state.mixertest.send({\n    message: {\n      request: \"configure\",\n      muted: self.state.muted\n    }\n  }); //console.log('muted', this.state.mixertest)\n  //if(self.state.muted){\n\n  self.participantChangeStatus(this.state.myId, false); //}\n}\nexport function forceMute() {\n  var self = this;\n  this.state.mixertest.send({\n    message: {\n      request: \"configure\",\n      muted: true\n    }\n  });\n  self.participantChangeStatus(this.state.myId, false);\n}\nexport function exitAudioRoom() {\n  var self = this;\n\n  if (this.state.mixertest) {\n    this.state.mixertest.send({\n      message: {\n        request: \"unpublish\"\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/hosseinshafiei/Projects/ecollab/client/src/components/rooms/janus-tools.js"],"names":["Janus","$","sessionCreate","room","self","init","debug","callback","janus","server","state","success","attach","plugin","opaqueId","pluginHandle","setState","mixertest","log","getPlugin","getId","registerUsername","error","consentDialog","on","iceState","mediaState","medium","webrtcState","onmessage","msg","jsep","event","participantChangeStatus","myid","addParticipant","fullname","userUUID","userColor","webrtcUp","createOffer","media","video","audio","echoCancellation","muted","reloadParams","publish","request","send","message","list","f","id","display","setup","warn","talking","leaving","removeParticipant","handleRemoteJsep","onlocalstream","stream","localStream","onremotestream","length","append","attachMediaStream","document","getElementById","remoteStream","oncleanup","destroyed","window","location","reload","register","pin","myId","participants","filter","item","p","participant","split","exisitingParticipant","concat","uuid","role","current","participantId","exisiting","participantDisplay","status","prevState","participantChangeRoom","participantRoom","toggleMute","forceMute","exitAudioRoom"],"mappings":"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","sourcesContent":["import Janus from \"../../janus.js\";\nimport $ from 'jquery';\nexport function sessionCreate(room) {\n  var self = this;\n  Janus.init({\n    debug: \"all\",\n    callback: function () {\n      var janus = new Janus({\n        server: self.state.server,\n        success: function () {\n          // Attach to AudioBridge plugin\n          janus.attach({\n            plugin: \"janus.plugin.audiobridge\",\n            opaqueId: self.state.opaqueId,\n            success: function (pluginHandle) {\n              //$('#details').remove();\n              self.setState({ mixertest: pluginHandle });\n              Janus.log(\n                \"Plugin attached! (\" +\n                  self.state.mixertest.getPlugin() +\n                  \", id=\" +\n                  self.state.mixertest.getId() +\n                  \")\"\n              );\n              self.registerUsername(room);\n              // Prepare the username registration\n              /*\n                                    $('#audiojoin').removeClass('hide').show();\n                                    $('#registernow').removeClass('hide').show();\n                                    $('#register').click(registerUsername);\n                                    $('#username').focus();\n                                    $('#start').removeAttr('disabled').html(\"Stop\")\n                                        .click(function () {\n                                            $(this).attr('disabled', true);\n                                            janus.destroy();\n                                        });\n                                    */\n            },\n            error: function (error) {\n              Janus.error(\"  -- Error attaching plugin...\", error);\n              //bootbox.alert(\"Error attaching plugin... \" + error);\n            },\n            consentDialog: function (on) {\n              Janus.debug(\n                \"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\"\n              );\n            },\n            iceState: function (state) {\n              Janus.log(\"ICE state changed to \" + state);\n            },\n            mediaState: function (medium, on) {\n              Janus.log(\n                \"Janus \" +\n                  (on ? \"started\" : \"stopped\") +\n                  \" receiving our \" +\n                  medium\n              );\n            },\n            webrtcState: function (on) {\n              Janus.log(\n                \"Janus says our WebRTC PeerConnection is \" +\n                  (on ? \"up\" : \"down\") +\n                  \" now\"\n              );\n            },\n            onmessage: function (msg, jsep) {\n              Janus.debug(\" ::: Got a message :::\", msg);\n              var event = msg[\"audiobridge\"];\n              Janus.debug(\"Event: \" + event);\n              if (event) {\n                //console.log(event, msg);\n                if (event == \"talking\") {\n                  self.participantChangeStatus(msg[\"id\"], true);\n                }\n                if (event == \"stopped-talking\") {\n                  self.participantChangeStatus(msg[\"id\"], false);\n                }\n                if (event === \"joined\") {\n                  // Successfully joined, negotiate WebRTC now\n                  if (msg[\"id\"]) {\n                    self.setState({\n                      myid: msg[\"id\"],\n                    });\n                    Janus.log(\n                      \"Successfully joined room \" +\n                        msg[\"room\"] +\n                        \" with ID \" +\n                        self.state.myid\n                    );\n                    self.addParticipant(\n                      msg[\"id\"],\n                      self.state.fullname +\n                        \"ยง\" +\n                        self.state.userUUID +\n                        \"ยง\" +\n                        self.state.userColor\n                    );\n\n                    if (!self.state.webrtcUp) {\n                      self.setState({ webrtcUp: true });\n                      // Publish our stream\n                      self.state.mixertest.createOffer({\n                        media: {\n                          video: false,\n                          audio: { echoCancellation: true },\n                        }, // This is an audio only room\n                        success: function (jsep) {\n                          Janus.debug(\"Got SDP!\", jsep);\n                          var muted = true\n                          if(self.state.reloadParams && self.state.reloadParams['mic']) {\n                            muted = false\n                          }\n                          var publish = { request: \"configure\", muted: muted };\n                          self.state.mixertest.send({\n                            message: publish,\n                            jsep: jsep,\n                          });\n                        },\n                        error: function (error) {\n                          Janus.error(\"WebRTC error:\", error);\n                          // bootbox.alert(\"WebRTC error... \" + error.message);\n                        },\n                      });\n                    }\n                  }\n                  // Any room participant?\n                  if (msg[\"participants\"]) {\n                    var list = msg[\"participants\"];\n                    Janus.debug(\"Got a list of participants:\", list);\n                    for (var f in list) {\n                      var id = list[f][\"id\"];\n                      var display = list[f][\"display\"];\n                      var setup = list[f][\"setup\"];\n                      var muted = list[f][\"muted\"];\n                      //console.log(\"%%%%%%%%\", list[f]);\n                      self.addParticipant(list[f][\"id\"], list[f][\"display\"]);\n                      //self.newRemoteFeed(id, display, audio, video);\n                      /*\n                                                    Janus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n                                                    if ($('#rp' + id).length === 0) {\n                                                        // Add to the participants list\n                                                        $('#list').append('<li id=\"rp' + id + '\" class=\"list-group-item\">' + display +\n                                                            ' <i class=\"absetup fa fa-chain-broken\"></i>' +\n                                                            ' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n                                                        $('#rp' + id + ' > i').hide();\n                                                    }\n                                                    if (muted === true || muted === \"true\")\n                                                        $('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n                                                    else\n                                                        $('#rp' + id + ' > i.abmuted').hide();\n                                                    if (setup === true || setup === \"true\")\n                                                        $('#rp' + id + ' > i.absetup').hide();\n                                                    else\n                                                        $('#rp' + id + ' > i.absetup').removeClass('hide').show();\n                                                        */\n                    }\n                  }\n                } else if (event === \"roomchanged\") {\n                  // The user switched to a different room\n                  self.setState({\n                    myid: msg[\"id\"],\n                  });\n                  Janus.log(\n                    \"Moved to room \" +\n                      msg[\"room\"] +\n                      \", new ID: \" +\n                      self.state.myid\n                  );\n                  // Any room participant?\n                  // $('#list').empty();\n                  if (msg[\"participants\"]) {\n                    var list = msg[\"participants\"];\n                    Janus.debug(\"Got a list of participants:\", list);\n                    for (var f in list) {\n                      var id = list[f][\"id\"];\n                      var display = list[f][\"display\"];\n                      var setup = list[f][\"setup\"];\n                      var muted = list[f][\"muted\"];\n                      //console.log(\">>>>>>\", list[f]);\n                      self.addParticipant(\n                        msg[\"id\"],\n                        self.state.fullname +\n                          \"ยง\" +\n                          self.state.userUUID +\n                          \"ยง\" +\n                          self.state.userColor\n                      );\n\n                      Janus.debug(\n                        \"  >> [\" +\n                          id +\n                          \"] \" +\n                          display +\n                          \" (setup=\" +\n                          setup +\n                          \", muted=\" +\n                          muted +\n                          \")\"\n                      );\n                      /*\n                                                     if ($('#rp' + id).length === 0) {\n                                                         // Add to the participants list\n                                                         $('#list').append('<li id=\"rp' + id + '\" class=\"list-group-item\">' + display +\n                                                             ' <i class=\"absetup fa fa-chain-broken\"></i>' +\n                                                             ' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n                                                         $('#rp' + id + ' > i').hide();\n                                                     }\n                                                     if (muted === true || muted === \"true\")\n                                                         $('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n                                                     else\n                                                         $('#rp' + id + ' > i.abmuted').hide();\n                                                     if (setup === true || setup === \"true\")\n                                                         $('#rp' + id + ' > i.absetup').hide();\n                                                     else\n                                                         $('#rp' + id + ' > i.absetup').removeClass('hide').show();\n                                                         */\n                    }\n                  }\n                } else if (event === \"destroyed\") {\n                  // The room has been destroyed\n                  Janus.warn(\"The room has been destroyed!\");\n                } else if (event === \"event\") {\n                  //console.log('Participant...', msg)\n                  if (msg[\"participants\"]) {\n                    var list = msg[\"participants\"];\n                    Janus.debug(\"Got a list of participants:\", list);\n                    for (var f in list) {\n                      var id = list[f][\"id\"];\n                      var display = list[f][\"display\"];\n                      var setup = list[f][\"setup\"];\n                      var muted = list[f][\"muted\"];\n                      var talking = list[f][\"talking\"];\n                      Janus.debug(\n                        \"  >> [\" +\n                          id +\n                          \"] \" +\n                          display +\n                          \" (setup=\" +\n                          setup +\n                          \", muted=\" +\n                          muted +\n                          \")\"\n                      );\n                      //console.log(\"%%%%%%%%\", list);\n                      if (talking) {\n                        //console.log(\"%%%%%%%%\",list[f][\"id\"],\"is talking ...\");\n                      }\n                      if (muted) {\n                        self.participantChangeStatus(list[f][\"id\"], false);\n                      }\n                      self.addParticipant(list[f][\"id\"], list[f][\"display\"]);\n                      /*\n                                                    if ($('#rp' + id).length === 0) {\n                                                        // Add to the participants list\n                                                        $('#list').append('<li id=\"rp' + id + '\" class=\"list-group-item\">' + display +\n                                                            ' <i class=\"absetup fa fa-chain-broken\"></i>' +\n                                                            ' <i class=\"abmuted fa fa-microphone-slash\"></i></li>');\n                                                        $('#rp' + id + ' > i').hide();\n                                                    }\n                                                    if (muted === true || muted === \"true\")\n                                                        $('#rp' + id + ' > i.abmuted').removeClass('hide').show();\n                                                    else\n                                                        $('#rp' + id + ' > i.abmuted').hide();\n                                                    if (setup === true || setup === \"true\")\n                                                        $('#rp' + id + ' > i.absetup').hide();\n                                                    else\n                                                        $('#rp' + id + ' > i.absetup').removeClass('hide').show();\n                                                        */\n                    }\n                  } else if (msg[\"error\"]) {\n                    if (msg[\"error_code\"] === 485) {\n                      // This is a \"no such room\" error: give a more meaningful description\n                    } else {\n                    }\n                    return;\n                  }\n                  // Any new feed to attach to?\n                  if (msg[\"leaving\"]) {\n                    // One of the participants has gone away?\n                    var leaving = msg[\"leaving\"];\n                    self.removeParticipant(leaving);\n                    Janus.log(\n                      \"Participant left: \" +\n                        leaving +\n                        \" elements with ID #rp\" +\n                        leaving +\n                        \")\"\n                    );\n                    //$('#rp' + leaving).remove();\n                  }\n                }\n              }\n              if (jsep) {\n                Janus.debug(\"Handling SDP as well...\", jsep);\n                self.state.mixertest.handleRemoteJsep({ jsep: jsep });\n              }\n            },\n            onlocalstream: function (stream) {\n              Janus.debug(\" ::: Got a local stream :::\", stream);\n              //console.log(\"Local stream ******\", stream);\n              //console.log(\"Local stream ******\", stream.getTracks());\n              self.setState({ localStream: stream });\n\n              // We're not going to attach the local audio stream\n              // $('#audiojoin').hide();\n              // $('#room').removeClass('hide').show();\n              //$('#participant').removeClass('hide').html(myusername).show();\n            },\n            onremotestream: function (stream) {\n              if ($(\"#roomaudio\").length === 0) {\n                $(\"#mixedaudio\")\n                  .append(\n                    '<audio class=\"rounded centered\" id=\"roomaudio\" width=\"100%\" height=\"100%\" autoplay/>'\n                  );\n                Janus.attachMediaStream(\n                  document.getElementById(\"roomaudio\"),\n                  stream\n                );\n                self.setState({ remoteStream: stream });\n              }\n            },\n            oncleanup: function () {\n              //  webrtcUp = false;\n              Janus.log(\" ::: Got a cleanup notification :::\");\n              //$('#participant').empty().hide();\n              //$('#list').empty();\n              //$('#mixedaudio').empty();\n              //$('#room').hide();\n            },\n          });\n        },\n        error: function (error) {\n          //   Janus.error(error);\n          //console.log(error);\n        },\n        destroyed: function () {\n          window.location.reload();\n        },\n      });\n    },\n  });\n}\n\nexport function registerUsername(room) {\n  var self = this;\n  var register = {\n    request: \"join\",\n    room: room,\n    pin: self.state.pin,\n    display:\n      self.state.fullname +\n      \" ยง\" +\n      self.state.userUUID +\n      \"ยง\" +\n      self.state.userColor,\n  };\n  self.state.mixertest.send({ message: register });\n  self.setState({ myId: self.state.mixertest.id });\n}\n\nexport function removeParticipant(id) {\n  var self = this;\n  self.setState({\n    participants: self.state.participants.filter((item) => item.id !== id),\n  });\n}\n\nexport function addParticipant(id, p) {\n  //console.log(\"Adding Participants ...\", id, p);\n  var self = this;\n  var participant = p.split(\"ยง\");\n  if (this.exisitingParticipant(participant[1])) {\n    self.setState({\n      participants: self.state.participants.concat({\n        id: id,\n        display: participant[0],\n        uuid: participant[1],\n        userColor: participant[2],\n        role: \"listener\",\n        current: \"stopped-talking\",\n      }),\n    });\n  }\n  //console.log(\"participant added:\", participant[1]);\n}\n\nexport function exisitingParticipant(participantId) {\n  var self = this;\n  var exisiting = self.state.participants.filter(\n    (item) => item.uuid === participantId\n  );\n  if (exisiting.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function participantDisplay(participantId) {\n  var self = this;\n  var exisiting = self.state.participants.filter(\n    (item) => item.uuid === participantId\n  );\n  if (exisiting.length === 0) {\n    return \"\";\n  } else {\n    return exisiting[0].display;\n  }\n}\n\nexport function participantChangeStatus(participantId, status) {\n  this.setState((prevState) => ({\n    talking: {\n      ...prevState.talking, \n      [participantId]: status, \n    },\n  }));\n}\n\nexport function participantChangeRoom(participantId, room) {\n  this.setState((prevState) => ({\n    participantRoom: {\n      ...prevState.participantRoom, \n      [participantId]: room, \n    },\n  }));\n}\n\nexport function toggleMute() {\n  var self = this;\n  this.state.mixertest.send({\n    message: { request: \"configure\", muted: self.state.muted },\n  });\n  //console.log('muted', this.state.mixertest)\n  //if(self.state.muted){\n  self.participantChangeStatus(this.state.myId, false);\n  //}\n}\n\nexport function forceMute() {\n  var self = this;\n  this.state.mixertest.send({\n    message: { request: \"configure\", muted: true },\n  });\n\n  self.participantChangeStatus(this.state.myId, false);\n}\n\nexport function exitAudioRoom() {\n  var self = this;\n  if (this.state.mixertest) {\n    this.state.mixertest.send({ message: { request: \"unpublish\" } });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}